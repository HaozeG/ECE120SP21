Question 1: Describe the errors that occur when trying to assemble lab13.asm. Identify the cause of each error.
Line 14: "illegal operands for missing opcode" 
         There should be a pseudo-op .ORIG before the operand x3000.
Line 16: "instruction appears before .ORIG"
         As the assembler had not find a .ORIG, it assumed that 
         this instruction was placed before the beginning of the program.
Line 17: "constant outside of allowed range"
         Originally, the offset of PC is x3010. But the instruction LD 
         only accepts an immediate value of 9 bits. x3010 exceeds the allowed range 9 bits.
Line 19: "illegal operands for ADD"
         There is a redundant comma after R3.
Line 30: "constant outside of allowed range"
         Originally, the offset of PC is x300F. But the instruction LD 
         only accepts an immediate value of 9 bits. x300F exceeds the allowed range 9 bits.
Line 32: "label OUTERLOOP has already appeared"
         BRpz needs to be changed to BRzp. BRpz is not the correct assembler format.
Line 35: "constant outside of allowed range"
         The address x3011 should be replaced by a label RESULT. As the instruction LD 
         only accepts an immediate value of 9 bits.
An .END pseudo-op should be placed at the end of the program.


Question 2: For each label in the code, write down the corresponding memory location. 
INPUT:      x300E
OUTERLOOP:  x3004
INNERLOOP:  x3005
RESULT:     x3011


Question 3: Between using labels and explicit memory locations/offsets, which one makes the most sense, and why?
Using labels is better as we need not change the PCoffset of our instructions when we make changes to the program, 
which makes branching much easier. Also, labels are more intuitive and easier to understand. 
